import com.amazonaws.services.lambda.model.Runtime
import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.AWSCredentialsProvider
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {
    dependencies {
        classpath 'jp.classmethod.aws:gradle-aws-plugin:0.28'
    }
}

apply plugin: 'java'
apply plugin: 'jp.classmethod.aws.lambda'

apply from: '../credentials.gradle'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile project(':aws')
    compile project(':reports-batch-aws')

    compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
    compile 'com.amazonaws:aws-lambda-java-events:1.3.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.53-beta'
}

aws {
    credentialsProvider = new AWSCredentialsProvider() {

        @Override
        AWSCredentials getCredentials() {
            return new AWSCredentials() {
                @Override
                String getAWSAccessKeyId() {
                    return getAmazonAccessKey()
                }

                @Override
                String getAWSSecretKey() {
                    return getAmazonSecretKey()
                }
            }
        }

        @Override
        void refresh() {
            // no-op
        }
    }
}

task zip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

task uploadLambda(type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
    functionName = 'github-reports-lambda'
    role = "arn:aws:iam::${aws.accountId}:role/github-reports-role"
    zipFile = zip.archivePath
    handler = 'com.novoda.github.reports.lambda.Lambda::handle'
    runtime = Runtime.Java8
}
