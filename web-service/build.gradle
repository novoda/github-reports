import com.amazonaws.services.lambda.model.Runtime
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {
    dependencies {
        classpath 'jp.classmethod.aws:gradle-aws-plugin:0.28'
    }
}

apply plugin: 'java'
apply plugin: 'jp.classmethod.aws.lambda'

targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile project(':core')
    compile project(':db-layer')

    compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
    compile 'com.amazonaws:aws-lambda-java-events:1.3.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.71-beta'
}

jar {
    exclude '*.credentials.sample'
    exclude '*.json.sample'
}

task zip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
    exclude '*.sample'
}

// TODO: add more lambdas here
def lambdasMap = [
        'GetRepositoriesAction': 'github-reports-repositories-get',
        'GetOrganisationUsersAction': 'github-reports-users-organisation-get'
]

task uploadActionLambdas(group: 'aws')

lambdasMap.each { key, value ->
    String uploadLambdaTask = "upload${key}Lambda"
    task(uploadLambdaTask, type: AWSLambdaMigrateFunctionTask, dependsOn: zip) {
        functionName = value
        role = "arn:aws:iam::${aws.accountId}:role/github-reports-ws-role"
        zipFile = zip.archivePath
        handler = "com.novoda.github.reports.web.lambda.${key}::handleRequest"
        runtime = Runtime.Java8
        memorySize = 256
        timeout = 30
    }
    uploadActionLambdas.dependsOn uploadLambdaTask
}

